{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from data_describe.text.topic_modeling import topic_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_20newsgroups\n",
    "categories = ['alt.atheism']\n",
    "newsgroups_train = fetch_20newsgroups(subset='train', categories=categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\"text\": newsgroups_train['data']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>From: darice@yoyo.cc.monash.edu.au (Fred Rice)...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>From: chrisb@tafe.sa.edu.au (Chris BELL)\\nSubj...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Subject: Re: The Inimitable Rushdie\\nFrom: kma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>From: timmbake@mcl.ucsb.edu (Bake Timmons)\\nSu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>From: I3150101@dbstu1.rz.tu-bs.de (Benedikt Ro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text\n",
       "0  From: darice@yoyo.cc.monash.edu.au (Fred Rice)...\n",
       "1  From: chrisb@tafe.sa.edu.au (Chris BELL)\\nSubj...\n",
       "2  Subject: Re: The Inimitable Rushdie\\nFrom: kma...\n",
       "3  From: timmbake@mcl.ucsb.edu (Bake Timmons)\\nSu...\n",
       "4  From: I3150101@dbstu1.rz.tu-bs.de (Benedikt Ro..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explicitly providing number of topics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topic 1</th>\n",
       "      <th>Topic 1 Coefficient Value</th>\n",
       "      <th>Topic 2</th>\n",
       "      <th>Topic 2 Coefficient Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Term 1</th>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.025</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 2</th>\n",
       "      <td>:</td>\n",
       "      <td>0.009</td>\n",
       "      <td>:</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 3</th>\n",
       "      <td>-</td>\n",
       "      <td>0.005</td>\n",
       "      <td>God</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 4</th>\n",
       "      <td>God</td>\n",
       "      <td>0.005</td>\n",
       "      <td>|</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 5</th>\n",
       "      <td>much</td>\n",
       "      <td>0.004</td>\n",
       "      <td>them</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 6</th>\n",
       "      <td>those</td>\n",
       "      <td>0.004</td>\n",
       "      <td>had</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 7</th>\n",
       "      <td>way</td>\n",
       "      <td>0.003</td>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 8</th>\n",
       "      <td>time</td>\n",
       "      <td>0.003</td>\n",
       "      <td>-</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 9</th>\n",
       "      <td>atheists</td>\n",
       "      <td>0.003</td>\n",
       "      <td>these</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 10</th>\n",
       "      <td>may</td>\n",
       "      <td>0.003</td>\n",
       "      <td>atheists</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Topic 1 Topic 1 Coefficient Value   Topic 2  \\\n",
       "Term 1         |>                     0.025        >>   \n",
       "Term 2          :                     0.009         :   \n",
       "Term 3          -                     0.005       God   \n",
       "Term 4        God                     0.005         |   \n",
       "Term 5       much                     0.004      them   \n",
       "Term 6      those                     0.004       had   \n",
       "Term 7        way                     0.003        |>   \n",
       "Term 8       time                     0.003         -   \n",
       "Term 9   atheists                     0.003     these   \n",
       "Term 10       may                     0.003  atheists   \n",
       "\n",
       "        Topic 2 Coefficient Value  \n",
       "Term 1                      0.014  \n",
       "Term 2                      0.010  \n",
       "Term 3                      0.006  \n",
       "Term 4                      0.004  \n",
       "Term 5                      0.004  \n",
       "Term 6                      0.004  \n",
       "Term 7                      0.004  \n",
       "Term 8                      0.004  \n",
       "Term 9                      0.004  \n",
       "Term 10                     0.004  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<data_describe.text.topic_modeling.TopicModelWidget at 0x1948779a948>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lda_model = topic_model(df.text, num_topics=2)\n",
    "lda_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Guess optimal number of topics and show elbow plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topic 1</th>\n",
       "      <th>Topic 1 Coefficient Value</th>\n",
       "      <th>Topic 2</th>\n",
       "      <th>Topic 2 Coefficient Value</th>\n",
       "      <th>Topic 3</th>\n",
       "      <th>Topic 3 Coefficient Value</th>\n",
       "      <th>Topic 4</th>\n",
       "      <th>Topic 4 Coefficient Value</th>\n",
       "      <th>Topic 5</th>\n",
       "      <th>Topic 5 Coefficient Value</th>\n",
       "      <th>Topic 6</th>\n",
       "      <th>Topic 6 Coefficient Value</th>\n",
       "      <th>Topic 7</th>\n",
       "      <th>Topic 7 Coefficient Value</th>\n",
       "      <th>Topic 8</th>\n",
       "      <th>Topic 8 Coefficient Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Term 1</th>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.008</td>\n",
       "      <td>God</td>\n",
       "      <td>0.010</td>\n",
       "      <td>:</td>\n",
       "      <td>0.031</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.013</td>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.021</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.010</td>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.071</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 2</th>\n",
       "      <td>had</td>\n",
       "      <td>0.006</td>\n",
       "      <td>|</td>\n",
       "      <td>0.008</td>\n",
       "      <td>-</td>\n",
       "      <td>0.007</td>\n",
       "      <td>God</td>\n",
       "      <td>0.008</td>\n",
       "      <td>system</td>\n",
       "      <td>0.006</td>\n",
       "      <td>evidence</td>\n",
       "      <td>0.005</td>\n",
       "      <td>:</td>\n",
       "      <td>0.016</td>\n",
       "      <td>Jesus</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 3</th>\n",
       "      <td>|</td>\n",
       "      <td>0.005</td>\n",
       "      <td>-</td>\n",
       "      <td>0.007</td>\n",
       "      <td>God</td>\n",
       "      <td>0.006</td>\n",
       "      <td>atheists</td>\n",
       "      <td>0.005</td>\n",
       "      <td>Schneider)</td>\n",
       "      <td>0.006</td>\n",
       "      <td>am</td>\n",
       "      <td>0.005</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.007</td>\n",
       "      <td>God</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 4</th>\n",
       "      <td>-</td>\n",
       "      <td>0.005</td>\n",
       "      <td>atheists</td>\n",
       "      <td>0.005</td>\n",
       "      <td>also</td>\n",
       "      <td>0.005</td>\n",
       "      <td>those</td>\n",
       "      <td>0.005</td>\n",
       "      <td>keith@cco.caltech.edu</td>\n",
       "      <td>0.006</td>\n",
       "      <td>objective</td>\n",
       "      <td>0.004</td>\n",
       "      <td>Livesey)</td>\n",
       "      <td>0.007</td>\n",
       "      <td>them</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 5</th>\n",
       "      <td>God</td>\n",
       "      <td>0.005</td>\n",
       "      <td>those</td>\n",
       "      <td>0.005</td>\n",
       "      <td>Islamic</td>\n",
       "      <td>0.005</td>\n",
       "      <td>moral</td>\n",
       "      <td>0.005</td>\n",
       "      <td>am</td>\n",
       "      <td>0.005</td>\n",
       "      <td>world</td>\n",
       "      <td>0.004</td>\n",
       "      <td>(Jon</td>\n",
       "      <td>0.006</td>\n",
       "      <td>things</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 6</th>\n",
       "      <td>evidence</td>\n",
       "      <td>0.004</td>\n",
       "      <td>For</td>\n",
       "      <td>0.005</td>\n",
       "      <td>our</td>\n",
       "      <td>0.004</td>\n",
       "      <td>religious</td>\n",
       "      <td>0.005</td>\n",
       "      <td>Allan</td>\n",
       "      <td>0.005</td>\n",
       "      <td>read</td>\n",
       "      <td>0.004</td>\n",
       "      <td>livesey@solntze.wpd.sgi.com</td>\n",
       "      <td>0.006</td>\n",
       "      <td>atheists</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 7</th>\n",
       "      <td>time</td>\n",
       "      <td>0.004</td>\n",
       "      <td>Islam</td>\n",
       "      <td>0.004</td>\n",
       "      <td>A</td>\n",
       "      <td>0.004</td>\n",
       "      <td>-</td>\n",
       "      <td>0.004</td>\n",
       "      <td>Institute</td>\n",
       "      <td>0.004</td>\n",
       "      <td>take</td>\n",
       "      <td>0.004</td>\n",
       "      <td>God</td>\n",
       "      <td>0.005</td>\n",
       "      <td>evidence</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 8</th>\n",
       "      <td>it.</td>\n",
       "      <td>0.004</td>\n",
       "      <td>religion</td>\n",
       "      <td>0.004</td>\n",
       "      <td>may</td>\n",
       "      <td>0.004</td>\n",
       "      <td>our</td>\n",
       "      <td>0.004</td>\n",
       "      <td>objective</td>\n",
       "      <td>0.004</td>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.004</td>\n",
       "      <td>them</td>\n",
       "      <td>0.004</td>\n",
       "      <td>it.</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 9</th>\n",
       "      <td>We</td>\n",
       "      <td>0.004</td>\n",
       "      <td>&gt;&gt;</td>\n",
       "      <td>0.004</td>\n",
       "      <td>Islam</td>\n",
       "      <td>0.004</td>\n",
       "      <td>way</td>\n",
       "      <td>0.004</td>\n",
       "      <td>these</td>\n",
       "      <td>0.004</td>\n",
       "      <td>almost</td>\n",
       "      <td>0.004</td>\n",
       "      <td>moral</td>\n",
       "      <td>0.004</td>\n",
       "      <td>-</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Term 10</th>\n",
       "      <td>|&gt;</td>\n",
       "      <td>0.004</td>\n",
       "      <td>way</td>\n",
       "      <td>0.004</td>\n",
       "      <td>much</td>\n",
       "      <td>0.003</td>\n",
       "      <td>may</td>\n",
       "      <td>0.004</td>\n",
       "      <td>keith</td>\n",
       "      <td>0.004</td>\n",
       "      <td>atheists</td>\n",
       "      <td>0.003</td>\n",
       "      <td>A</td>\n",
       "      <td>0.004</td>\n",
       "      <td>They</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Topic 1 Topic 1 Coefficient Value   Topic 2  \\\n",
       "Term 1         >>                     0.008       God   \n",
       "Term 2        had                     0.006         |   \n",
       "Term 3          |                     0.005         -   \n",
       "Term 4          -                     0.005  atheists   \n",
       "Term 5        God                     0.005     those   \n",
       "Term 6   evidence                     0.004       For   \n",
       "Term 7       time                     0.004     Islam   \n",
       "Term 8        it.                     0.004  religion   \n",
       "Term 9         We                     0.004        >>   \n",
       "Term 10        |>                     0.004       way   \n",
       "\n",
       "        Topic 2 Coefficient Value  Topic 3 Topic 3 Coefficient Value  \\\n",
       "Term 1                      0.010        :                     0.031   \n",
       "Term 2                      0.008        -                     0.007   \n",
       "Term 3                      0.007      God                     0.006   \n",
       "Term 4                      0.005     also                     0.005   \n",
       "Term 5                      0.005  Islamic                     0.005   \n",
       "Term 6                      0.005      our                     0.004   \n",
       "Term 7                      0.004        A                     0.004   \n",
       "Term 8                      0.004      may                     0.004   \n",
       "Term 9                      0.004    Islam                     0.004   \n",
       "Term 10                     0.004     much                     0.003   \n",
       "\n",
       "           Topic 4 Topic 4 Coefficient Value                Topic 5  \\\n",
       "Term 1          >>                     0.013                     |>   \n",
       "Term 2         God                     0.008                 system   \n",
       "Term 3    atheists                     0.005             Schneider)   \n",
       "Term 4       those                     0.005  keith@cco.caltech.edu   \n",
       "Term 5       moral                     0.005                     am   \n",
       "Term 6   religious                     0.005                  Allan   \n",
       "Term 7           -                     0.004              Institute   \n",
       "Term 8         our                     0.004              objective   \n",
       "Term 9         way                     0.004                  these   \n",
       "Term 10        may                     0.004                  keith   \n",
       "\n",
       "        Topic 5 Coefficient Value    Topic 6 Topic 6 Coefficient Value  \\\n",
       "Term 1                      0.021         >>                     0.010   \n",
       "Term 2                      0.006   evidence                     0.005   \n",
       "Term 3                      0.006         am                     0.005   \n",
       "Term 4                      0.006  objective                     0.004   \n",
       "Term 5                      0.005      world                     0.004   \n",
       "Term 6                      0.005       read                     0.004   \n",
       "Term 7                      0.004       take                     0.004   \n",
       "Term 8                      0.004         |>                     0.004   \n",
       "Term 9                      0.004     almost                     0.004   \n",
       "Term 10                     0.004   atheists                     0.003   \n",
       "\n",
       "                             Topic 7 Topic 7 Coefficient Value   Topic 8  \\\n",
       "Term 1                            |>                     0.071        >>   \n",
       "Term 2                             :                     0.016     Jesus   \n",
       "Term 3                            >>                     0.007       God   \n",
       "Term 4                      Livesey)                     0.007      them   \n",
       "Term 5                          (Jon                     0.006    things   \n",
       "Term 6   livesey@solntze.wpd.sgi.com                     0.006  atheists   \n",
       "Term 7                           God                     0.005  evidence   \n",
       "Term 8                          them                     0.004       it.   \n",
       "Term 9                         moral                     0.004         -   \n",
       "Term 10                            A                     0.004      They   \n",
       "\n",
       "        Topic 8 Coefficient Value  \n",
       "Term 1                      0.026  \n",
       "Term 2                      0.007  \n",
       "Term 3                      0.006  \n",
       "Term 4                      0.006  \n",
       "Term 5                      0.006  \n",
       "Term 6                      0.005  \n",
       "Term 7                      0.004  \n",
       "Term 8                      0.004  \n",
       "Term 9                      0.004  \n",
       "Term 10                     0.004  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<data_describe.text.topic_modeling.TopicModelWidget at 0x194888dedc8>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lda_model = topic_model(df.text, num_topics=None)\n",
    "lda_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Coherence Values Across Topic Numbers'}, xlabel='Number of Topics', ylabel='Coherence Values'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lda_model.elbow_plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
